%{

#include "automaton.hpp"
#include "set.hpp"
#include <string>

using namespace univ_nantes;

#define YYSTYPE automaton
extern YYSTYPE yylval;
extern char* yyid;

extern FILE *yyin;
int yylex (void);
void yyerror (char const *);

// value of the last terminal that was observed by the lexer
extern char terminal;
// value of the last non-terminal that was observed by the lexer
extern int non_terminal;
// value of the previous-to-last non-terminal that was observed by the lexer
extern int previous_non_terminal;
// value of the last identifier that was observed by the lexer
extern std::string identifier;

// The set of automata that were already parsed
set<automaton> automata;

// Variable used to generate states whenever needed
int new_state=0;

%}

// Tokens used to communicate between the lexer and the parser
%token  AUTOMATE_KW
%token  INITIAL_KW FINAL_KW
%token  SEMICOLON EQUAL
%token  OR STAR PLUS
%token  L_PAR R_PAR L_BRACE R_BRACE L_TRANS R_TRANS
%token  IDENTIFIER TERMINAL NONTERMINAL


// Initial rule of the grammar
%start input

%%

input:
| input automaton
| input rationnal
;

// example: L1 = { ... }
automaton: IDENTIFIER EQUAL L_BRACE automaton_fields R_BRACE   {$$ = $4.determine(); $$.name = identifier; automata |= $$;}
;

automaton_fields:                                                             {$$ = automaton();}
// example: Initial 1; (1 is an initial state)
| automaton_fields INITIAL_KW  NONTERMINAL SEMICOLON                          {$$ = $1; $$.initials |= non_terminal;}
// example: Final 2;   (2 is a final state)
| automaton_fields FINAL_KW NONTERMINAL SEMICOLON                             {$$ = $1; $$.finals |= non_terminal;}
// example: 1 |-a-> 2; (transition labeled by 'a' from state 1 to state 2)
| automaton_fields NONTERMINAL L_TRANS TERMINAL R_TRANS NONTERMINAL SEMICOLON {$$ = $1; $$.transitions |= transition(previous_non_terminal, terminal, non_terminal);}
// example: 2 |--> 1;  (epsilon transition from state 1 to state 2)
| automaton_fields NONTERMINAL L_TRANS          R_TRANS NONTERMINAL SEMICOLON {$$ = $1; $$.transitions |= transition(previous_non_terminal, non_terminal);}
;


// example: L3 = a*b*;
rationnal: IDENTIFIER EQUAL rationnal_rules SEMICOLON {$$ = $3.determine(); $$.name = identifier; automata |= $$;}
;

/*
* TODO: Question 2. Ajoutez la grammaire permettant de reconna√Ætre des expressions rationnelles
* 
* indice : inspirez-vous de l'exercice 4.2 dans le TP 4.
*/

rationnal_rules:
| rationnal_rules L_PAR



rationnal_sommes: rationnal_sommes PLUS rationnal_produits
| rationnal_produits
;

rationnal_produits: rationnal_produits rationnal_facteurs
| rationnal_facteurs
;

rationnal_facteurs: L_PAR rationnal_sommes R_PAR
| rationnal_termes
;

rationnal_termes: TERMINAL
;

%%

void yyerror(const char *s) {
  printf("%s\n",s);
}

/*
 * Parses the lea file whose name is file and returns a set of automata, recognizing languages in the input file
 *
 * This functions is called in function main, in file lea.cpp
 * This functions is documented in file lea.cpp
 */
set<automaton> read_lea_file(char* file) {
  automata = set<automaton>();   // initialize the set of automata
  yyin=fopen(file,"r");          // connect the file to the lexer
  if(yyin==NULL) {		 
    printf("\n Error ! \n");
  } else {
    yyparse(); 	                 // read the file
  }
  return automata;
}
